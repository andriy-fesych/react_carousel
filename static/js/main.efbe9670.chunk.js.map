{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","itemWidth","frameSize","imageGap","animationDuration","useState","currentPos","setCurrentPos","imagesToLi","map","picture","index","className","style","marginRight","width","height","src","alt","toString","transform","transition","length","type","disabled","onClick","prevPos","App","infinite","state","setState","pictures","setPictures","newImage","setNewImage","changeHadler","value","key","prevState","htmlFor","name","id","min","max","onChange","e","target","onKeyDown","event","test","oldPics","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efbe9670.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  itemWidth: number,\n  frameSize: number,\n  imageGap: number,\n  animationDuration: number,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images, step, itemWidth, frameSize, imageGap, animationDuration,\n}) => {\n  const [currentPos, setCurrentPos] = useState(0);\n\n  const imagesToLi = (\n    images.map((picture, index) => (\n      <li\n        className=\"Carousel__item\"\n        key={picture}\n        style={{\n          marginRight: `${imageGap}px`,\n          width: `${itemWidth}px`,\n          height: `${itemWidth}px`,\n        }}\n      >\n        <img\n          data-cy=\"itemId\"\n          className=\"Carousel__image\"\n          src={picture}\n          alt={index.toString()}\n          width={itemWidth} // REMOVE THIS TO MAKE PICTURES ADAPTIVE DESPITE PROPORTIONS!!!!\n        />\n      </li>\n    ))\n  );\n\n  const moveForward = () => {\n    if (currentPos + frameSize + step < images.length) {\n      setCurrentPos((prevPos) => prevPos + step);\n    } else {\n      setCurrentPos(images.length - frameSize);\n    }\n  };\n\n  const moveBackward = () => {\n    if (currentPos - step > 0) {\n      setCurrentPos((prevPos) => prevPos - step);\n    } else {\n      setCurrentPos(0);\n    }\n  };\n\n  return (\n    <div className=\"Carousel\" style={{ width: `${(itemWidth + imageGap) * (frameSize) - imageGap}px` }}>\n      <ul\n        className=\"Carousel__list\"\n        style={{\n          transform: `translateX(-${currentPos * (itemWidth + imageGap)}px)`,\n          transition: `transform ${animationDuration}ms ease-in-out`,\n          width: `${images.length * (itemWidth + imageGap)}px`,\n        }}\n      >\n        {imagesToLi}\n      </ul>\n      <h1>\n        current position is\n        {` ${currentPos}`}\n      </h1>\n      <h5>\n        (☝️ X-axis of the left border of 1st image in visible frame)\n      </h5>\n      <button\n        type=\"button\"\n        disabled={currentPos === 0}\n        onClick={moveBackward}\n        className=\"Carousel__button\"\n      >\n        Prev\n      </button>\n      <button\n        type=\"button\"\n        onClick={moveForward}\n        disabled={currentPos + frameSize === images.length}\n        data-cy=\"next\"\n        className=\"Carousel__button\"\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ntype StateProps = {\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n  imageGap: number,\n};\n\nconst App: React.FC = () => {\n  const [state, setState] = useState<StateProps>({\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    imageGap: 10,\n  } as StateProps);\n\n  const [pictures, setPictures] = useState([\n    './img/1.png',\n    './img/2.png',\n    /*   'https://media.glamourmagazine.co.uk/photos/64b6ae8fcd1ad7c51ecf045c/1:1/'\n    + 'w_1280,h_1280,c_limit/RYAN%20GOSLING%20EVA%20MENDES%20180723%20default'\n    + 'GettyImages-1527942629.jpg', */\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n\n  const [newImage, setNewImage] = useState('');\n\n  const changeHadler = (value: number | boolean,\n    key: keyof StateProps) => {\n    setState(prevState => ({ ...prevState, [key]: value }));\n  };\n\n  function isImage(url: string) {\n    return (/\\.(jpg|jpeg|png|webp|avif|gif|svg)$/).test(url);\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter' && newImage.length > 0) {\n      if (isImage(newImage)) {\n        setPictures(oldPics => [newImage, ...oldPics]);\n        setNewImage('');\n      } else {\n        // eslint-disable-next-line no-alert\n        alert('image URL is invalid');\n        setNewImage('');\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">{`Carousel with ${pictures.length} images, ${state.frameSize} frameSize and ${state.step} stepSize`}</h1>\n\n      <Carousel\n        images={pictures}\n        step={state.step}\n        itemWidth={state.itemWidth}\n        frameSize={state.frameSize}\n        imageGap={state.imageGap}\n        animationDuration={state.animationDuration}\n      />\n      <label htmlFor=\"itemId\">\n        <input\n          type=\"number\"\n          name=\"itemWidth\"\n          id=\"itemId\"\n          value={state.itemWidth}\n          min={50}\n          max={500}\n          step={10}\n          onChange={e => {\n            changeHadler(+e.target.value, e.target.name as keyof StateProps);\n          }}\n        />\n        {'  - image size in pixels'}\n        <br />\n      </label>\n      <label htmlFor=\"frameId\">\n        <input\n          type=\"number\"\n          name=\"frameSize\"\n          id=\"frameId\"\n          value={state.frameSize}\n          min={1}\n          max={10}\n          step={1}\n          onChange={e => {\n            changeHadler(+e.target.value, e.target.name as keyof StateProps);\n          }}\n        />\n        {' - frame size (quantity of images visible)'}\n        <br />\n      </label>\n      <label htmlFor=\"stepId\">\n        <input\n          type=\"number\"\n          name=\"step\"\n          id=\"stepId\"\n          value={state.step}\n          min={1}\n          max={10}\n          step={1}\n          onChange={e => {\n            changeHadler(+e.target.value, e.target.name as keyof StateProps);\n          }}\n        />\n        {' - step size (number of images scrolled per click)'}\n        <br />\n      </label>\n\n      <input\n        type=\"number\"\n        name=\"animationDuration\"\n        id=\"animationDuration\"\n        value={state.animationDuration}\n        min={100}\n        max={60000}\n        step={100}\n        onChange={e => {\n          changeHadler(+e.target.value, e.target.name as keyof StateProps);\n        }}\n      />\n      {' - (default 1000) - time in ms to show the new portion of images'}\n      <br />\n      <input\n        type=\"number\"\n        name=\"imageGap\"\n        id=\"imageGap\"\n        value={state.imageGap}\n        min={1}\n        max={50}\n        step={1}\n        onChange={e => {\n          changeHadler(+e.target.value, e.target.name as keyof StateProps);\n        }}\n      />\n      {' - horizontal spacing between the images in pixels'}\n      <br />\n      <input\n        type=\"text\"\n        name=\"newImage\"\n        id=\"newImage\"\n        value={newImage}\n        onChange={e => {\n          setNewImage(e.target.value);\n        }}\n        onKeyDown={handleKeyDown}\n      />\n      {' - paste your image url here'}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}